# Generated by Django 3.2.7 on 2021-10-15 21:36

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.functions.datetime
import simple_history.models
import uuid


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('esp', '0002_auto_20211014_1617'),
    ]

    operations = [
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_on', models.DateTimeField(auto_now_add=True)),
                ('updated_on', models.DateTimeField(auto_now=True)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user_type', models.CharField(blank=True, choices=[('admin', 'Admin'), ('teacher', 'Teacher'), ('student', 'Student'), ('guardian', 'Guardian'), ('onsite_volunteer', 'On-site Volunteer')], max_length=128, null=True)),
                ('permission_type', models.CharField(choices=[('edit_courses', 'Courses Edit'), ('view_courses', 'Courses View All'), ('edit_programs', 'Programs Edit'), ('view_all_programs', 'Programs View All'), ('view_all_student_dashboards', 'Student Dashboard View All'), ('view_all_teacher_dashboards', 'Teacher Dashboards View All'), ('view_admin_dashboard', 'Admin Dashboard View'), ('view_student_dashboard', 'Student Dashboard View Own'), ('register_for_program', 'Register For Program'), ('enter_lottery', 'Enter Program Lottery'), ('update_profile', 'Update Profile'), ('access_formstack', 'Access Formstack'), ('view_teacher_dashboard', 'Teacher Dashboard View Own'), ('update_teacher_profile', 'Teacher Update Profile'), ('set_teacher_availability', 'Teacher Set Availability'), ('view_volunteer_dashboard', 'Volunteer Program Dashboard View'), ('volunteer_program_signup', 'Volunteer Program Signup')], max_length=128)),
                ('start_date', models.DateTimeField(blank=True, default=django.db.models.functions.datetime.Now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('course_role', models.CharField(blank=True, choices=[('teacher', 'Teacher'), ('observer', 'Observer'), ('student', 'Student')], max_length=128, null=True)),
                ('course', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='esp.course')),
                ('program', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='esp.program')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permissions', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HistoricalPermission',
            fields=[
                ('id', models.UUIDField(db_index=True, default=uuid.uuid4, editable=False)),
                ('created_on', models.DateTimeField(blank=True, editable=False)),
                ('updated_on', models.DateTimeField(blank=True, editable=False)),
                ('is_deleted', models.BooleanField(default=False)),
                ('user_type', models.CharField(blank=True, choices=[('admin', 'Admin'), ('teacher', 'Teacher'), ('student', 'Student'), ('guardian', 'Guardian'), ('onsite_volunteer', 'On-site Volunteer')], max_length=128, null=True)),
                ('permission_type', models.CharField(choices=[('edit_courses', 'Courses Edit'), ('view_courses', 'Courses View All'), ('edit_programs', 'Programs Edit'), ('view_all_programs', 'Programs View All'), ('view_all_student_dashboards', 'Student Dashboard View All'), ('view_all_teacher_dashboards', 'Teacher Dashboards View All'), ('view_admin_dashboard', 'Admin Dashboard View'), ('view_student_dashboard', 'Student Dashboard View Own'), ('register_for_program', 'Register For Program'), ('enter_lottery', 'Enter Program Lottery'), ('update_profile', 'Update Profile'), ('access_formstack', 'Access Formstack'), ('view_teacher_dashboard', 'Teacher Dashboard View Own'), ('update_teacher_profile', 'Teacher Update Profile'), ('set_teacher_availability', 'Teacher Set Availability'), ('view_volunteer_dashboard', 'Volunteer Program Dashboard View'), ('volunteer_program_signup', 'Volunteer Program Signup')], max_length=128)),
                ('start_date', models.DateTimeField(blank=True, default=django.db.models.functions.datetime.Now)),
                ('end_date', models.DateTimeField(blank=True, null=True)),
                ('course_role', models.CharField(blank=True, choices=[('teacher', 'Teacher'), ('observer', 'Observer'), ('student', 'Student')], max_length=128, null=True)),
                ('history_id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_change_reason', models.CharField(max_length=100, null=True)),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('course', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esp.course')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('program', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='esp.program')),
                ('user', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical permission',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
    ]
